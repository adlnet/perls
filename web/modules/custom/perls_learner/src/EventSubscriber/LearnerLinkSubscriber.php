<?php

namespace Drupal\perls_learner\EventSubscriber;

use Drupal\Core\Routing\TrustedRedirectResponse;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\flag\FlagServiceInterface;
use Drupal\node\Entity\Node;
use Drupal\perls_learner_state\Plugin\XapiStateManager;
use Symfony\Component\EventDispatcher\Event;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;

/**
 * Creates a event subscriber to react learn_link node view.
 */
class LearnerLinkSubscriber implements EventSubscriberInterface {

  /**
   * The current user account.
   *
   * @var \Drupal\Core\Session\AccountInterface
   */
  protected $currentUser;

  /**
   * The flag service.
   *
   * @var \Drupal\flag\FlagServiceInterface
   */
  protected $flagService;

  /**
   * The state manager service.
   *
   * @var \Drupal\perls_learner_state\Plugin\XapiStateManager
   */
  protected $stateManager;

  /**
   * LRS Request generator.
   *
   * @var \Drupal\xapi\LRSRequestGenerator
   */
  protected $lrsRequestGenerator;

  /**
   * Event dispatcher service.
   *
   * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
   */
  protected $dispatcher;

  /**
   * LearnerLinkSubscriber constructor.
   *
   * @param \Drupal\Core\Session\AccountInterface $account
   *   The current user account.
   * @param \Drupal\flag\FlagServiceInterface $flag
   *   The flag service.
   * @param \Drupal\perls_learner_state\Plugin\XapiStateManager $state_manager
   *   The state manager service.
   */
  public function __construct(
    AccountInterface $account,
    FlagServiceInterface $flag,
    XapiStateManager $state_manager) {
    $this->currentUser = $account;
    $this->flagService = $flag;
    $this->stateManager = $state_manager;
  }

  /**
   * {@inheritdoc}
   */
  public static function getSubscribedEvents() {
    $events['kernel.request'] = ['onRequest', 28];
    return $events;
  }

  /**
   * Listen to route of full view of learn_link content type.
   *
   * We should send history event and completed statement by hand because the
   * history event is generated by ajax request which cannot finish in time
   * because the redirect executed earlier. The completed flag only can be send
   * by javascript either.(user scroll to bottom of the page.)
   *
   * @param \Symfony\Component\EventDispatcher\Event $event
   *   The event triggered by the request.
   */
  public function onRequest(Event $event) {
    // Don't process events with HTTP exceptions - those have either been thrown
    // by us or have nothing to do with rabbit hole.
    if ($event->getRequest()->get('exception') != NULL) {
      return;
    }

    $request = $event->getRequest();
    // Get the route from the request.
    if ($route = $event->getRequest()->get('_route')) {
      // Only continue if the request route is the an entity canonical.
      if ($route === 'entity.node.canonical' &&
        ($node = $request->attributes->get('node')) &&
        ($request->attributes->get('node')->getType() === 'learn_link') &&
        ($node->hasField('field_link_type') &&
          $node->get('field_link_type')->getString() !== 'custom') &&
        $node->hasField('field_content_link')) {
        $url_field = $node->get('field_content_link')->getValue();
        if (!empty($url_field[0]['uri']) && !$this->currentUser->hasPermission('edit any learn_article content')) {
          // Send history event by hand, probably the ajax call isn't fast
          // enough to send on normal way.
          $this->sendHistoryStatement($node);
          $this->sendCompletedStatement($node);
          $new_response = new TrustedRedirectResponse(Url::fromUri($url_field[0]['uri'])->toString());
          $event->setResponse($new_response);
        }
      }
    }
  }

  /**
   * Set a completed statement to LRS endpoint.
   *
   * @param \Drupal\node\Entity\Node $node
   *   The viewed node.
   */
  protected function sendCompletedStatement(Node $node) {
    $this->stateManager->sendStatement('xapi_completed_state', $node);
  }

  /**
   * Send launched state to LRS.
   *
   * @param \Drupal\node\Entity\Node $node
   *   The visited node.
   */
  protected function sendHistoryStatement(Node $node) {
    $this->stateManager->sendStatement('xapi_seen_state', $node);
  }

}
