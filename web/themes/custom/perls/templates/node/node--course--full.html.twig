{#
/**
 * @file
 * Course detail view.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 */
#}
{%
  set classes = [
  'c-node',
  view_mode ? 'c-node--' ~ view_mode|clean_class,
  'c-node--' ~ node.bundle|clean_class,
  view_mode ? 'c-node--' ~ view_mode|clean_class ~ '--' ~ node.bundle|clean_class,
  node.isPromoted() ? 'is-promoted',
  node.isSticky() ? 'is-sticky',
  not node.isPublished() ? 'is-unpublished',
  'u-spacing--double'
]
%}

<article{{ attributes.addClass(classes) }}>
  <div class="c-node__header">
    <div class="button o-bookmark-toggle">
      {{ content.flag_bookmark }}
      <svg class="icon-flag-bookmark" id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><defs></defs><title>Stats-Bookmarked</title><path fill="inherit" d="M3.88,20a1,1,0,0,1-.32-.06C3,19.74,3,19.74,3.05,0H4.52c0,6-.06,14.65,0,17.87.93-.61,2.57-1.66,5.49-3.49a.71.71,0,0,1,.8,0l5.16,3.47L16.1,0h1.47L17.4,19.24a.76.76,0,0,1-.39.65.74.74,0,0,1-.75,0l-5.9-4c-2.36,1.49-5.8,3.68-6.1,3.9A.42.42,0,0,1,3.88,20Z"/></svg>

      <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 35.27 50' class="icon-flag-bookmark active"><title>bookmark</title><path d='M1.53,50a1.51,1.51,0,0,1-.72-.18A1.54,1.54,0,0,1,0,48.47V0H35.27V48.47a1.54,1.54,0,0,1-2.4,1.26l-15-10.19L2.38,49.75A1.53,1.53,0,0,1,1.53,50Z'  fill='inherit'/></svg>
    </div>
    {% if label %}
      <h1{{ title_attributes.addClass('c-node__title') }}>
        {{ title_prefix }}
        {{ label }}
        {{ title_suffix }}
      </h1>
    {% endif %}
    {{ content.flag_completed }}
    {{ content.field_tags }}
    <div class="o-progress">
      {{ course_progress }}
    </div>
  </div>

  <div{{ content_attributes.addClass('c-node__content u-spacing') }}>
    <div class="c-field c-field--name-field-learning-content js-slick-slider">
      <ul class="c-field__items">

        {% if content.field_description[0] %}
          <li class="c-field__item course-description">
            <div class="c-card card--description">
              <div class="c-card__header">
                <div class="c-card__title">{{ 'Description' | t }}</div>
              </div>
              <div class="c-card__content">
                {{ content.field_description }}
              </div>
            </div>
          </li>
        {% endif %}

        {{ content.field_learning_content }}

      </ul>
    </div>
  </div>

</article>
