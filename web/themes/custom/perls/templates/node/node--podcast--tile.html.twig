{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{%
  set classes = [
  'c-node',
  view_mode ? 'c-node--' ~ view_mode|clean_class,
  'c-node--' ~ node.bundle|clean_class,
  view_mode ? 'c-node--' ~ view_mode|clean_class ~ '--' ~ node.bundle|clean_class,
  node.isPromoted() ? 'is-promoted',
  node.isSticky() ? 'is-sticky',
  not node.isPublished() ? 'is-unpublished',
  'u-spacing--half'
]
%}
<article{{ attributes.addClass(classes) }}>
  {% if content.field_media_image.0 %}
    <div class="c-node__card c-card inline-background o-background-image--{{ id }}">
      {% set image_uri = node.field_media_image.0.entity.field_media_image.entity.fileuri %}
    <style>
      .o-background-image--{{ id }} {
        background-image: url({{ image_uri|image_style('16_9_small') }});
      }
      @media (min-width: 1100px) {
        .o-background-image--{{ id }} {
          background-image: url({{ image_uri|image_style('16_9_medium') }});
        }
      }
    </style>
  {% elseif content.field_artwork.0 %}
    <div class="c-node__card c-card inline-background o-background-image--{{ id }}">
      <style>
        .o-background-image--{{ id }} {
          background-image: url({{ node.field_artwork.entity.field_media_image.entity.fileuri|image_style('16_9_small') }});
        }
        @media (min-width: 600px) {
          .o-background-image--{{ id }} {
            background-image: url({{ node.field_artwork.entity.field_media_image.entity.fileuri|image_style('16_9_medium') }});
          }
        }
        @media (min-width: 900px) {
          .o-background-image--{{ id }} {
            background-image: url({{ node.field_artwork.entity.field_media_image.entity.fileuri|image_style('16_9_large') }});
          }
        }
      </style>
  {% else %}
    <div class="c-node__card c-card">
  {% endif %}
    {{ content.flag_completed }}
    {{ content.flag_bookmark }}
    <a target="{{ target }}" href="{{ url }}" class="c-card__link u-center-block u-middle-block"></a>

    {% if content.recommendation_reason %}
      <div class="recommendation-info">
        <span class="recommendation-info-trigger"></span>
        <div class="recommendation-info-content">
          {{ content.recommendation_reason }}
        </div>
      </div>
    {% endif %}
    {% if episode_count %}
      <div class="o-episode-count">{{ episode_count }}</div>
    {% endif %}
  </div>

  <div{{ content_attributes.addClass('c-node__content') }}>
    <div class="title--section">
      {% if label and not page %}
        <a class="c-card__title-link" target="{{ target }}" href="{{ url }}" rel="bookmark">
          <h2{{ title_attributes.addClass('c-card__title') }}>
            {% if not node.isPublished() %}
              <div class="o-status">
                <span title="{{ 'This content is not visible to learners'|t }}">{{ 'Unpublished'|t }}</span>
              </div>
            {% endif %}

            {{ label }}
          </h2>
        </a>
      {% endif %}
      {% if content.recommendation_reason %}
          <span class="recommendation-info-trigger"></span>
          <div class="recommendation-info-content">
            {{ content.recommendation_reason }}
          </div>
      {% endif %}
    </div>
    <div class="o-rich-text u-spacing">
      {{ content| without('flag_bookmark', 'flag_completed', 'field_tags', 'field_image', 'field_media_image', 'flag_recommendation', 'recommendation_reason', 'field_artwork', 'id') }}
    </div>
  </div>
  {% if content.field_tags.0 %}
    <div class="c-card__footer">
      {{ content.field_tags }}
    </div>
  {% endif %}
</article>
