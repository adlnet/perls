diff --git a/r4032login.services.yml b/r4032login.services.yml
index 3b2db73..7e2bc86 100644
--- a/r4032login.services.yml
+++ b/r4032login.services.yml
@@ -1,6 +1,6 @@
 services:
   r4032login.subscriber:
     class: Drupal\r4032login\EventSubscriber\R4032LoginSubscriber
-    arguments: ['@config.factory', '@current_user', '@path.matcher', '@event_dispatcher', '@messenger']
+    arguments: ['@config.factory', '@current_user', '@request_stack', '@path.matcher', '@event_dispatcher', '@messenger']
     tags:
       - { name: event_subscriber }
diff --git a/src/EventSubscriber/R4032LoginSubscriber.php b/src/EventSubscriber/R4032LoginSubscriber.php
index 99e69a3..f135f9c 100644
--- a/src/EventSubscriber/R4032LoginSubscriber.php
+++ b/src/EventSubscriber/R4032LoginSubscriber.php
@@ -15,6 +15,7 @@ use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Url;
 use Drupal\r4032login\Event\RedirectEvent;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
+use Symfony\Component\HttpFoundation\RequestStack;
 use Drupal\Component\Utility\Xss;
 use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
 
@@ -37,6 +38,13 @@ class R4032LoginSubscriber extends HttpExceptionSubscriberBase {
    */
   protected $currentUser;
 
+  /**
+   * The request stack service.
+   *
+   * @var \Symfony\Component\HttpFoundation\RequestStack
+   */
+  protected $requestStack;
+
   /**
    * The path matcher.
    *
@@ -65,6 +73,8 @@ class R4032LoginSubscriber extends HttpExceptionSubscriberBase {
    *   The configuration factory.
    * @param \Drupal\Core\Session\AccountInterface $current_user
    *   The current user.
+   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   *   The request stack service.
    * @param \Drupal\Core\Path\PathMatcherInterface $path_matcher
    *   The path matcher.
    * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
@@ -72,9 +82,10 @@ class R4032LoginSubscriber extends HttpExceptionSubscriberBase {
    * @param \Drupal\Core\Messenger\MessengerInterface $messenger
    *   The messenger service.
    */
-  public function __construct(ConfigFactoryInterface $config_factory, AccountInterface $current_user, PathMatcherInterface $path_matcher, EventDispatcherInterface $event_dispatcher, MessengerInterface $messenger) {
+  public function __construct(ConfigFactoryInterface $config_factory, AccountInterface $current_user, RequestStack $request_stack, PathMatcherInterface $path_matcher, EventDispatcherInterface $event_dispatcher, MessengerInterface $messenger) {
     $this->configFactory = $config_factory;
     $this->currentUser = $current_user;
+    $this->requestStack = $request_stack;
     $this->pathMatcher = $path_matcher;
     $this->eventDispatcher = $event_dispatcher;
     $this->messenger = $messenger;
diff --git a/tests/src/Unit/R4032LoginSubscriberTest.php b/tests/src/Unit/R4032LoginSubscriberTest.php
index 7e5bc66..6b1ff8e 100644
--- a/tests/src/Unit/R4032LoginSubscriberTest.php
+++ b/tests/src/Unit/R4032LoginSubscriberTest.php
@@ -8,6 +8,7 @@ namespace Drupal\Tests\r4032login\Unit {
   use Drupal\Tests\UnitTestCase;
   use Symfony\Component\EventDispatcher\EventDispatcher;
   use Symfony\Component\HttpFoundation\Request;
+  use Symfony\Component\HttpFoundation\RequestStack;
   use Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent;
   use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
   use Symfony\Component\HttpKernel\HttpKernelInterface;
@@ -40,6 +41,13 @@ namespace Drupal\Tests\r4032login\Unit {
      */
     protected $currentUser;
 
+    /**
+     * The mocked request stack service.
+     *
+     * @var \Symfony\Component\HttpFoundation\RequestStack|\PHPUnit_Framework_MockObject_MockObject
+     */
+    protected $requestStack;
+
     /**
      * The path matcher.
      *
@@ -100,6 +108,10 @@ namespace Drupal\Tests\r4032login\Unit {
       ]);
 
       $this->currentUser = $this->createMock('Drupal\Core\Session\AccountInterface');
+
+      $this->requestStack = new RequestStack();
+      $this->requestStack->push(new Request());
+
       $this->pathMatcher = $this->createMock('\Drupal\Core\Path\PathMatcherInterface');
       $this->eventDispatcher = $this->createMock('\Symfony\Component\EventDispatcher\EventDispatcherInterface');
       $this->messenger = $this->createMock('\Drupal\Core\Messenger\MessengerInterface');
@@ -123,7 +135,7 @@ namespace Drupal\Tests\r4032login\Unit {
      * @covers ::__construct
      */
     public function testConstruct() {
-      $r4032login = new R4032LoginSubscriber($this->configFactory, $this->currentUser, $this->pathMatcher, $this->eventDispatcher, $this->messenger);
+      $r4032login = new R4032LoginSubscriber($this->configFactory, $this->currentUser, $this->requestStack, $this->pathMatcher, $this->eventDispatcher, $this->messenger);
       $this->assertInstanceOf('\Drupal\r4032login\EventSubscriber\R4032LoginSubscriber', $r4032login);
     }
 
@@ -158,7 +170,7 @@ namespace Drupal\Tests\r4032login\Unit {
         ->method('isAnonymous')
         ->willReturn(TRUE);
 
-      $r4032login = new R4032LoginSubscriber($config, $this->currentUser, $this->pathMatcher, $this->eventDispatcher, $this->messenger);
+      $r4032login = new R4032LoginSubscriber($config, $this->currentUser, $this->requestStack, $this->pathMatcher, $this->eventDispatcher, $this->messenger);
       $event = new GetResponseForExceptionEvent($this->kernel, $request, HttpKernelInterface::MASTER_REQUEST, new AccessDeniedHttpException());
       $dispatcher = new EventDispatcher();
       $dispatcher->addListener(KernelEvents::EXCEPTION, [
@@ -205,7 +217,7 @@ namespace Drupal\Tests\r4032login\Unit {
         ->method('isAuthenticated')
         ->willReturn(TRUE);
 
-      $r4032login = new R4032LoginSubscriber($config, $this->currentUser, $this->pathMatcher, $this->eventDispatcher, $this->messenger);
+      $r4032login = new R4032LoginSubscriber($config, $this->currentUser, $this->requestStack, $this->pathMatcher, $this->eventDispatcher, $this->messenger);
       $event = new GetResponseForExceptionEvent($this->kernel, $request, HttpKernelInterface::MASTER_REQUEST, new AccessDeniedHttpException());
       $dispatcher = new EventDispatcher();
       $dispatcher->addListener(KernelEvents::EXCEPTION, [
